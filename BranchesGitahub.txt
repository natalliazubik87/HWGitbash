1. На локальном репозитории сделать ветки для:
Postman/Jmeter/CheckLists/Bag Reports/SQL/Charles/Mobile testing - git branch Postman/Jmeter/CheckLists/Bag Reports/SQL/Charles/Mobile testing

2. Запушить все ветки на внешний репозиторий - git push -u origin Postman/Jmeter/CheckLists/Bag Reports/SQL/Charles/Mobile testing

3. В ветке Bag Reports сделать текстовый документ со структурой баг репорта - touch BRstructure,vim BRstructure

Структура баг-репорта

 -Описание(Краткое описание ошибки)
   *Шаги воспроизведения/Steps to reproduce(STR)
   *Фактический результат/Actual result
   *Ожидаемый результат/Expected result(ссылка на что-то,например требование и т.д)
 -Проект(Название проекта)
 -Компонент(Где именно обнаружен дефект)
 -Версия билда
 -Серьезность/Severity(Степень влияния данного бага на приложение.Назначается тестировщиком.):
   *Blocker(тип ошибки,приводящий программу в нерабочее состояние)
   *Critical(приводит ключевой функционал в нерабочее состояние,существенное отклонение от бизнес логики,потеря пользовательских данных)
   *Major(серьезные ошибки,свидетельствующие об отклонении от бизнес логики,но в то же время не имеют критическое воздействие на приложение)
   *Minor(незначительный дефект,не нарушающий функционал приложения,но который является несоответствием ожидаемому результату,например ошибка дизайна)
   *Trivial(не влияет на работу приложения,но может быть обнаружен визуально,например опечатка в тексте)
 -Приоритет/Priority(Очередь исправления бага.Определяет в основном PM.):
   *High
   *Medium
   *Low

   //Пример:Высокая Severity низкий Priority - Функция,которая редко используется пользователем,и она совсем не работает.
     Пример:Низкая Severity высокий Priority - гугл написано с 1 О,Gogle//
   //Вместо названий Severity и Priority могут обозначаться цифрами//

 -Статус(Статус бага в жизненном цикле)
 -Автор
 -Назначение
 -Окружение/Enviroment(Операционная система,ее разрядность,браузер,его версия)
   *Dev(Разработчики,иногда тестировщики)
   *Stage(Стабильная версия приложения,работают тестировщики)
   *Prod(Работают пользватели)
 -Прикрепленниые файлы(скриншот экрана с воспроизведения дефекта(с выделенным красным полем,указывающим на место ошибки) или видео воспроизведения дефекта) :wq
 
4. Запушить структуру багрепорта на внешний репозиторий - git add . > git commit -m "bug report's structure" > git push

5. Вмержить ветку Bag Reports в Main - git checkout main > git merge BagReports

6. Запушить main на внешний репозиторий. - git push -u origin main

7. В ветке CheckLists набросать структуру чек листа. - touch ChL_structure.txt > vim ChL_structure.txt

Структура чек-листа

Чек-лист - высокоуровневый набор идей тестов.(Список проверок,в котором показано,что мы будем тестировать.Что мы собирвемся делать,что мы не хотим забыть,что будем проверять,результат проверок)
 - Build
 - Enviroment
 - Test Date
 - Test Type
 - Checking(Название самих проверок)
 - Result
 
 :wq

8. Запушить структуру на внешний репозиторий - git add . > git commit -m "add check list's structure" > git push

9. На внешнем репозитории сделать Pull Request ветки CheckLists в main - перейдя в ветку CheckLists нажать кнопку Compare and pull request

10. Синхронизировать Внешнюю и Локальную ветки Main - в GitBash выполняем команды git fetch > git pull
